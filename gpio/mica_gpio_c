#include <stdio.h>
#include "mica_gpio.h"
#ifndef __USE_POSIX199309
#define __USE_POSIX199309
#endif
#include <time.h>
#include <pthread.h>

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
pthread_t thread = 0;
int enable = 0;

struct pin {
	enum MICA_GPIO_DIRECTION direction;
};
struct pin pins[MICA_GPIO_SIZE] = { };

unsigned char _direction = 0;
unsigned char _enable = 0;
unsigned char _state = 0;

void *_mica_gpio_run(void *callback) {
	const struct timespec req = { .tv_nsec = 500000000 };
	struct timespec rem;
	while (enable) {
		nanosleep(&req, &rem);
		mica_gpio_callback cb = (mica_gpio_callback)callback;
		for (int i = 0; i < MICA_GPIO_SIZE; i++) {
			if (mica_gpio_get_enable(i+1))
				cb(i+1, 1, NULL);
		}
	}
}

void *mica_gpio_set_callback(mica_gpio_callback callback, void *data) {
	pthread_mutex_lock(&lock);
	if (thread != 0) {
		enable = 0;
		void *result = NULL;
		pthread_join(thread, &result);
		thread = 0;
	}
	if (thread == 0 && callback) {
		enable = 1;
		pthread_create(&thread, NULL, _mica_gpio_run, (void *) callback);
	}
	pthread_mutex_unlock(&lock);
}

enum MICA_GPIO_DIRECTION mica_gpio_get_direction(unsigned char id) {
	if (id > 0 && id <= MICA_GPIO_SIZE) {
		struct pin pin = pins[id - 1];
		return pin.direction;
	}
	return -1;
}

void mica_gpio_set_direction(unsigned char id, enum MICA_GPIO_DIRECTION direction) {
	if (id > 0 && id <= MICA_GPIO_SIZE) {
		if (direction == INPUT || direction == OUTPUT) {
			pins[id - 1].direction = direction;
		}
	}
}

enum MICA_GPIO_STATE mica_gpio_get_state(unsigned char id) {
	if (id > 0 && id <= MICA_GPIO_SIZE) {
		struct pin pin = pins[id - 1];
		if (pin.direction == OUTPUT) {
			return (_state & (1 << id - 1)) == (1 << id - 1);
		}
	}
	return -1;
}

void mica_gpio_set_state(unsigned char id, enum MICA_GPIO_STATE state) {
	if (id > 0 && id <= MICA_GPIO_SIZE) {
		struct pin pin = pins[id - 1];
		if (pin.direction == OUTPUT)
			_state = (_state & ~(1 << id - 1)) | ((state & 1) << id - 1);
	}
}

unsigned char mica_gpio_get_enable(unsigned char id) {
	if (id > 0 && id <= MICA_GPIO_SIZE) {
		struct pin pin = pins[id - 1];
		if (pin.direction == INPUT) {
			return (_enable & (1 << id - 1)) == (1 << id - 1);
		}
	}
	return 0;
}

void mica_gpio_set_enable(unsigned char id, unsigned char enable) {
	if (id > 0 && id <= MICA_GPIO_SIZE) {
		struct pin pin = pins[id - 1];
		if (pin.direction == INPUT)
			_enable = (_enable & ~(1 << id - 1)) | ((enable & 1) << id - 1);
	}
}
